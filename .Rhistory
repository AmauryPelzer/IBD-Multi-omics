# Convert EC numbers to Entrez IDs
gene.CD.eco <- clusterProfiler::bitr(deg.CD.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
View(gene.CD.eco)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.CD.eco <- gene.CD.eco %>% distinct (gene.CD.eco$ENZYME, .keep_all = TRUE)
#convert ENTREZ ID to KEGG ids
gene.CD.kID <- keggConv("eco", gene.CD.eco$ENTREZID)
gene.CD.eco$ENTREZID
keggConv("eco", "947117")
#add
geneList.CD <- sub("^", "ncbi-geneid:", gene.CD.eco$ENTREZID)
geneList.CD
#convert ENTREZ ID to KEGG ids
gene.CD.kID <- keggConv("eco", geneList.CD)
gene.CD.kID
#remove 'eco"
gene.CD.kID <- gsub("eco:", "", gene.CD.kID)
# Perform KEGG pathway over-representation analysis
kk.CD <- enrichKEGG(gene = gene.CD.kID ,
organism     = 'eco',
pvalueCutoff = 0.05)
library(KEGGREST)
# Perform KEGG pathway over-representation analysis
kk.CD <- enrichKEGG(gene = gene.CD.kID ,
organism     = 'eco',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.CD.kID ,
organism     = 'eco',
pvalueCutoff = 0.05)
# Show results
kk.CD@result
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.CD.kID ,
organism     = 'eco',
pvalueCutoff = 1)
gene.CD.kID
gene.CD.kID[1]
View(gene.CD.eco)
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.CD.eco$ENTREZID,
organism     = 'eco',
pvalueCutoff = 1)
gene.CD.eco$ENTREZID
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
kk <- enrichKEGG(gene         = gene,
organism     = 'hsa',
pvalueCutoff = 0.05)
library(clusterProfiler)
kk <- enrichKEGG(gene         = gene,
organism     = 'hsa',
pvalueCutoff = 0.05)
kk
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
gene
gene.CD.eco
View(deg.UC.sub)
#remove gene family definition from EC codes
deg.UC.sub$Gene.Family <- sub(":.*", "", deg.UC.sub$Gene.Family)
# Convert EC numbers to Entrez IDs
gene.UC.eco <- clusterProfiler::bitr(deg.UC.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.UC.eco <- gene.UC.eco %>% distinct (gene.UC.eco$ENZYME, .keep_all = TRUE)
View(gene.UC.eco)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'eco',
pvalueCutoff = 1)
# Show results
kk.CD@result
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'eco',
pvalueCutoff = 1)
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'hsa',
pvalueCutoff = 1)
View(gene.UC.eco)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'ecok',
pvalueCutoff = 1)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'eco',
pvalueCutoff = 1)
search_kegg_organism()
search_kegg_organism('eco', by='kegg_code')
#remove gene family definition from EC codes
deg.UC.sub$Gene.Family <- sub(":.*", "", deg.UC.sub$Gene.Family)
# Convert EC numbers to Entrez IDs
gene.UC.eco <- clusterProfiler::bitr(deg.UC.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.UC.eco <- gene.UC.eco %>% distinct (gene.UC.eco$ENZYME, .keep_all = TRUE)
#add "ncbi-geneid:" term to the beginning
geneList.CD <- sub("^", "ncbi-geneid:", gene.CD.eco$ENTREZID)
#convert ENTREZ ID to KEGG ids
gene.CD.kID <- keggConv("eco", geneList.CD)
#remove 'eco"
gene.CD.kID <- gsub("eco:", "", gene.CD.kID)
#remove gene family definition from EC codes
deg.UC.sub$Gene.Family <- sub(":.*", "", deg.UC.sub$Gene.Family)
# Convert EC numbers to Entrez IDs
gene.UC.eco <- clusterProfiler::bitr(deg.UC.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.UC.eco <- gene.UC.eco %>% distinct (gene.UC.eco$ENZYME, .keep_all = TRUE)
#add "ncbi-geneid:" term to the beginning
geneList.UC <- sub("^", "ncbi-geneid:", gene.UC.eco$ENTREZID)
#convert ENTREZ ID to KEGG ids
gene.UC.kID <- keggConv("eco", geneList.UC)
#remove 'eco"
gene.UC.kID <- gsub("eco:", "", gene.UC.kID)
gene.UC.kID
gene.UC.kID[1]
gene.UC.kID[[1]]
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = c("b3616","b1866"),
organism     = 'eco',
pvalueCutoff = 1)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.kID[,2],
organism     = 'eco',
pvalueCutoff = 1)
gene.UC.kID
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.kID[[1]],
organism     = 'eco',
pvalueCutoff = 1)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.kID[[]],
organism     = 'eco',
pvalueCutoff = 0.05)
gene.UC.kID[[2]]
as.character(gene.CD.kID)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.kID),
organism     = 'eco',
pvalueCutoff = 0.05)
as.character(gene.UC.kID)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.kID),
organism     = 'ecok',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.kID),
organism     = 'ece',
pvalueCutoff = 0.05)
KEGG_DATA <- get_data_from_KEGG_db(species)
data(geneList, package='DOSE')
##'   de <- names(geneList)[1:100]
##'   yy <- enrichKEGG(de, pvalueCutoff=0.01)
##'   head(yy)
data(geneList, package='DOSE')
de <- names(geneList)[1:100]
yy <- enrichKEGG(de, pvalueCutoff=0.01)
head(yy)
View(gene.UC.eco)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'ecok',
pvalueCutoff = 0.05)
#remove gene family definition from EC codes
deg.UC.sub$Gene.Family <- sub(":.*", "", deg.UC.sub$Gene.Family)
View(deg.UC.sub)
# Convert EC numbers to Entrez IDs
gene.UC.eco <- clusterProfiler::bitr(deg.UC.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.UC.eco <- gene.UC.eco %>% distinct (gene.UC.eco$ENTREZID, .keep_all = TRUE)
View(gene.UC.eco)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'ecok',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'eco',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'ecj',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'ecd',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'ecok',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'uma',
pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'uma',
#pvalueCutoff = 0.05)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'uma',
#pvalueCutoff = 0.05
)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = gene.UC.eco$ENTREZID,
organism     = 'hsa',
#pvalueCutoff = 0.05
)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.eco$ENTREZID),
organism     = 'hsa',
#pvalueCutoff = 0.05
)
#remove gene family definition from EC codes
deg.UC.sub$Gene.Family <- sub(":.*", "", deg.UC.sub$Gene.Family)
# Convert EC numbers to Entrez IDs
gene.UC.eco <- clusterProfiler::bitr(deg.UC.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.UC.eco <- gene.UC.eco %>% distinct (gene.UC.eco$ENTREZID, .keep_all = TRUE)
#add "ncbi-geneid:" term to the beginning
geneList.UC <- sub("^", "ncbi-geneid:", gene.UC.eco$ENTREZID)
#convert ENTREZ ID to KEGG ids
gene.UC.kID <- keggConv("eco", geneList.UC)
#remove 'eco"
gene.UC.kID <- gsub("eco:", "", gene.UC.kID)
gene.UC.kID
#remove gene family definition from EC codes
deg.UC.sub$Gene.Family <- sub(":.*", "", deg.UC.sub$Gene.Family)
# Convert EC numbers to Entrez IDs
gene.UC.eco <- clusterProfiler::bitr(deg.UC.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.UC.eco <- gene.UC.eco %>% distinct (gene.UC.eco$ENTREZID, .keep_all = TRUE)
#add "ncbi-geneid:" term to the beginning
geneList.UC <- sub("^", "ncbi-geneid:", gene.UC.eco$ENTREZID)
#convert ENTREZ ID to KEGG ids
gene.UC.kID <- keggConv("eco", geneList.UC)
gene.UC.kID
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.kID),
organism     = 'eco',
#pvalueCutoff = 0.05
)
as.character(gene.UC.kID)
#remove 'eco"
gene.UC.kID <- gsub("eco:", "", gene.UC.kID)
gene.UC.kID
as.character(gene.UC.kID)
x <- as.character(gene.UC.kID)
View(gene.CD.eco)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.kID),
organism     = 'eco',
keyType = "kegg"
#pvalueCutoff = 0.05
)
data(gcSample)
gcSample[[5]]
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.eco$ENTREZID),
organism     = 'eco',
keyType = "ncbi-geneid"
#pvalueCutoff = 0.05
)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.kID),
organism     = 'eco',
keyType = "ncbi-geneid"
#pvalueCutoff = 0.05
)
#remove gene family definition from EC codes
deg.UC.sub$Gene.Family <- sub(":.*", "", deg.UC.sub$Gene.Family)
# Convert EC numbers to Entrez IDs
gene.UC.eco <- clusterProfiler::bitr(deg.UC.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.UC.eco <- gene.UC.eco %>% distinct (gene.UC.eco$ENTREZID, .keep_all = TRUE)
#add "ncbi-geneid:" term to the beginning
geneList.UC <- sub("^", "ncbi-geneid:", gene.UC.eco$ENTREZID)
#convert ENTREZ ID to KEGG ids
gene.UC.kID <- keggConv("eco", geneList.UC)
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.UC.kID),
organism     = 'eco',
keyType = "ncbi-geneid"
#pvalueCutoff = 0.05
)
library(stringr)
library(KEGGREST)
library(clusterProfiler)
library(dplyr)
library(org.EcK12.eg.db)
library(ggplot2)
setwd("C:/Users/duygu/OneDrive/Desktop/Metagenome-Metabolome analysis/analysis_scripts")
#setwd(dirname(getActiveDocumentContext()$path)) not working correctly so the above command is an alternative
#read data from file
sampleLabels <- read.csv("preprocessing/output/metaData",sep = "\t")
sampleLabels <- read.csv("preprocessing/output/metaData",sep = "\t")
mgxCount <- read.csv("preprocessing/output/mgxData",sep = "\t",header = TRUE)
mgxCount <- read.csv("preprocessing/output/mgxData",sep = "\t",header = TRUE)
# Separate CD, UC and nonIBD
cd <- sampleLabels[sampleLabels$diagnosis=="CD",]
uc <- sampleLabels[sampleLabels$diagnosis=="UC",]
nonIBD <- sampleLabels[sampleLabels$diagnosis=="nonIBD",]
# Select metagenomics data from CD, UC and nonIBD
metagenomics_cd <- subset(mgxCount, select= cd$External.ID)
metagenomics_uc <- subset(mgxCount, select= uc$External.ID)
metagenomics_nonIBD <- subset(mgxCount, select= nonIBD$External.ID)
View(metagenomics_cd)
View(metagenomics_nonIBD)
View(mgxCount)
set.seed(2820)
preTreat <- c(rnorm(1000, mean = 145, sd = 9))
postTreat <- c(rnorm(1000, mean = 138, sd = 8))
t.test(preTreat, postTreat, paired = TRUE)
set.seed(2820)
preTreat <- c(rnorm(1000, mean = 145, sd = 9))
postTreat <- c(rnorm(1000, mean = 138, sd = 8))
preTreat
postTreat
View(metagenomics_cd)
View(mgxCount)
View(sampleLabels)
View(cd)
View(uc)
metagenomics_cd[1,]
metagenomics_cd[2,]
rownames(metagenomics_cd)
t.test(preTreat,postTreat,paired = "TRUE")
t.test(metagenomics_cd[1,],metagenomics_nonIBD[1,])
t.test(metagenomics_cd[2,],metagenomics_nonIBD[2,])
t$statistic
res <- t.test(metagenomics_cd[2,],metagenomics_nonIBD[2,])
res$p.value
res$statistic
library(stringr)
library(KEGGREST)
library(clusterProfiler)
library(dplyr)
library(org.EcK12.eg.db)
library(ggplot2)
setwd("C:/Users/duygu/OneDrive/Desktop/Metagenome-Metabolome analysis/analysis_scripts")
#setwd(dirname(getActiveDocumentContext()$path)) not working correctly so the above command is an alternative
#read data from file
sampleLabels <- read.csv("preprocessing/output/metaData",sep = "\t")
sampleLabels <- read.csv("preprocessing/output/metaData",sep = "\t")
mgxCount <- read.csv("preprocessing/output/mgxData",sep = "\t",header = TRUE)
# Separate CD, UC and nonIBD
cd <- sampleLabels[sampleLabels$diagnosis=="CD",]
uc <- sampleLabels[sampleLabels$diagnosis=="UC",]
nonIBD <- sampleLabels[sampleLabels$diagnosis=="nonIBD",]
# Select metagenomics data from CD, UC and nonIBD
metagenomics_cd <- subset(mgxCount, select= cd$External.ID)
metagenomics_uc <- subset(mgxCount, select= uc$External.ID)
metagenomics_nonIBD <- subset(mgxCount, select= nonIBD$External.ID)
pvalue_PW_cd = NULL # Empty list for the p-values
tstat_PW_cd = NULL # Empty list of the t test statistics
regulation_PW_cd = NULL # Empty list for the factor: over-represented and under-represented
score_PW_cd = NULL
for(i in 1 : nrow(metagenomics_nonIBD)) { # For each gene :
x = metagenomics_nonIBD[i,] # control of gene number i
y = metagenomics_cd[i,] # CD of gene number i
# Compute t-test between the two conditions
t = t.test(x, y)
# Put the current p-value in the pvalues list
pvalue_PW_cd[i] = t$p.value
# Put the current t-statistic in the tstats list
tstat_PW_cd[i] = t$statistic
score_PW_cd[i] = abs(rowMeans(x)-rowMeans(y))
# Put the status (over- or under-represented) in regulation list
if (rowMeans(x)<rowMeans(y)){
regulation_PW_cd[i] = "Over-represented"
}
else{
regulation_PW_cd[i] = "Under-represented"
}
}
#padjust_PW_cd = p.adjust(pvalue_PW_cd, method="BH")
pvalue_PW_uc = NULL # Empty list for the p-values
tstat_PW_uc = NULL # Empty list of the t test statistics
regulation_PW_uc = NULL # Empty list for the factor: over-represented and under-represented
score_PW_uc = NULL
for(i in 1 : nrow(metagenomics_nonIBD)) { # For each gene :
x = metagenomics_nonIBD[i,] # control of gene number i
y = metagenomics_uc[i,] # UC of gene number i
# Compute t-test between the two conditions
t = t.test(x, y)
# Put the current p-value in the pvalues list
pvalue_PW_uc[i] = t$p.value
# Put the current t-statistic in the tstats list
tstat_PW_uc[i] = t$statistic
score_PW_uc[i] = abs(rowMeans(x)-rowMeans(y))
# Put the status (over- or under-represented) in regulation list
if (rowMeans(x)<rowMeans(y)){
regulation_PW_uc[i] = "Over-represented"
}
else{
regulation_PW_uc[i] = "Under-represented"
}
}
#padjust_PW_uc = p.adjust(pvalue_PW_uc, method="BH")
#group by organism having number of enzymes for CD disease
groupsCD <- dePW.CD %>% group_by(Species) %>%
summarise(enzyme_count=n(),
.groups = 'drop')
#for CD
metagenomics_cd <- cbind(mgxCount[,c(1:3)],metagenomics_cd)
dePW.CD <- metagenomics_cd[which(pvalue_PW_cd<0.05),]
dePW.CD$pvalue <- pvalue_PW_cd[which(pvalue_PW_cd<0.05)]
dePW.CD$regulation <- regulation_PW_cd[which(pvalue_PW_cd<0.05)]
dePW.CD$score <- score_PW_cd[which(pvalue_PW_cd<0.05)]
dePW.CD <- dePW.CD [,c("Gene.Family","Genus", "Species", "pvalue","regulation","score")]
#for UC
metagenomics_uc <- cbind(mgxCount[,c(1:3)],metagenomics_uc)
dePW.UC <- metagenomics_uc[which(pvalue_PW_uc<0.05),]
dePW.UC$pvalue <- pvalue_PW_uc[which(pvalue_PW_uc<0.05)]
dePW.UC$regulation <- regulation_PW_uc[which(pvalue_PW_uc<0.05)]
dePW.UC$score <- score_PW_uc[which(pvalue_PW_uc<0.05)]
dePW.UC <- dePW.UC [,c("Gene.Family","Genus", "Species", "pvalue","regulation","score")]
#group by organism having number of enzymes for CD disease
groupsCD <- dePW.CD %>% group_by(Species) %>%
summarise(enzyme_count=n(),
.groups = 'drop')
groupsCD <- groupsCD[order(-groupsCD$enzyme_count),]
groupsCD <- groupsCD [c(1:20),]
ggplot(groupsCD, aes(reorder( Species,enzyme_count), enzyme_count)) +
geom_bar(stat = "identity")+
scale_fill_gradient2(low = "#0000ff",
mid = "#ff0000",
high= "yellow",
midpoint = 0.1) +
coord_flip() +
labs(x = "Nof significantly changed enzymes (CD)", y = "Species")
#group by organism having number of enzymes for UC disease
groupsUC <- dePW.UC %>% group_by(Species) %>%
summarise(enzyme_count=n(),
.groups = 'drop')
groupsUC <- groupsUC[order(-groupsUC$enzyme_count),]
groupsUC <- groupsUC [c(1:20),]
ggplot(groupsUC, aes(reorder( Species,enzyme_count), enzyme_count)) +
geom_bar(stat = "identity")+
scale_fill_gradient2(low = "#0000ff",
mid = "#ff0000",
high= "yellow",
midpoint = 0.1) +
coord_flip() +
labs(x = "Nof significantly changed enzymes (UC)", y = "Species")
#we can also see the distribution based on genus
groupsGenus <- dePW.CD %>% group_by(Genus) %>%
summarise(enzyme_count=n(),
.groups = 'drop')
groupsGenus <- groupsGenus[order(-groupsGenus$enzyme_count),]
groupsGenus <- groupsGenus [c(1:20),]
ggplot(groupsGenus, aes(x = enzyme_count, y = Genus)) +
geom_bar(stat = "identity")
#group by organism having number of enzymes for UC disease
groupsUC <- dePW.UC %>% group_by(Species) %>%
summarise(enzyme_count=n(),
.groups = 'drop')
groupsUC <- groupsUC[order(-groupsUC$enzyme_count),]
groupsUC <- groupsUC [c(1:20),]
ggplot(groupsUC, aes(reorder( Species,enzyme_count), enzyme_count)) +
geom_bar(stat = "identity")+
scale_fill_gradient2(low = "#0000ff",
mid = "#ff0000",
high= "yellow",
midpoint = 0.1) +
coord_flip() +
labs(x = "Nof significantly changed enzymes (UC)", y = "Species")
# Subset Barnesiella_intestinihominis for CD
deg.CD.sub <- dePW.CD[grepl("Barnesiella_intestinihominis", dePW.CD$Species, fixed = TRUE),]
# Subset Bacteroides_xylanisolvens for CD
deg.UC.sub <- dePW.UC[grepl("Bacteroides_xylanisolvens", dePW.UC$Species, fixed = TRUE),]
View(deg.CD.sub)
View(deg.UC.sub)
#remove gene family definition from EC codes
deg.CD.sub$Gene.Family <- sub(":.*", "", deg.CD.sub$Gene.Family)
# Convert EC numbers to Entrez IDs
gene.CD.eco <- clusterProfiler::bitr(deg.CD.sub$Gene.Family, fromType = "ENZYME", toType = "ENTREZID", OrgDb = org.EcK12.eg.db)
View(gene.CD.eco)
#one to many mapping we will take only firts hits
#filter out double gene symbols
gene.CD.eco <- gene.CD.eco %>% distinct (gene.CD.eco$ENZYME, .keep_all = TRUE)
#add "ncbi-geneid:" term to the beginning
geneList.CD <- sub("^", "ncbi-geneid:", gene.CD.eco$ENTREZID)
geneList.CD
#convert ENTREZ ID to KEGG ids
gene.CD.kID <- keggConv("eco", geneList.CD)
gene.CD.kID
#remove 'eco"
gene.CD.kID <- gsub("eco:", "", gene.CD.kID)
gene.CD.kID
gene.CD.kID[[2]]
# Perform KEGG pathway over-representation analysis
kk.CD <- clusterProfiler::enrichKEGG(gene = as.character(gene.CD.kID),
organism     = 'eco',
#keyType = "ncbi-geneid"
pvalueCutoff = 0.05
)
version(clusterProfiler)
packageVersion(clusterProfiler)
packageVersion("clusterProfiler")
?install.packages()
install.packages("BiocManager")
packageVersion("clusterProfiler")
BiocManager::install("clusterProfiler")
packageVersion("clusterProfiler")
BiocManager::install("clusterProfiler",force = TRUE)
