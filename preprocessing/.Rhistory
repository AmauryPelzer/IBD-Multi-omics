# First create a DESeqDataSet object
#(non-intercept) statistical model based on the disease and biopsy_location, group column represent both of them
dds <- DESeqDataSetFromMatrix(countData = htxCount, colData=sampleLabels, design= ~0 + group)
#estimate the size factors
#To perform the median of ratios method of normalization, DESeq2 has a single estimateSizeFactors() function that will generate size factors for us.
dds <- estimateSizeFactors(dds)
#normalize the data (here for Quality Control(QC) plotting)
#QC plotting is optional
norm <- counts(dds,normalize=TRUE)
#create a 2logged data for original object (here for QC plotting)
datlog <- log(htxCount+1,2)
#create a 2logged norm object (here for QC plotting)
normlog <- log(norm+1,2)
#for QC remove genes that have not been measured in any sample in the experiment
datlogQC <- datlog[rowSums(datlog)!=0,]
normlogQC <- normlog[rowSums(normlog)!=0,]
#create QC plots for raw data, colored by different variables
factors <- c("disease","biopsy_location","group")
if(!dir.exists("QCraw")) dir.create("QCraw")
setwd(paste(WORK.DIR,"QCraw",sep="/"))
png("sizefactors.png")
plot(sizeFactors(dds),type='h',lwd=5,ylim=c(0,max(sizeFactors(dds))),col="darkblue")
dev.off()
createQCPlots(datlogQC, factors, Table=sampleLabels, normMeth="", postfix="")
setwd("..")
#create QC plots for normalized data colored by different variables
if(!dir.exists("QCnorm")) dir.create("QCnorm")
setwd(paste(WORK.DIR,"QCnorm",sep="/"))
createQCPlots(normlogQC, factors, Table=sampleLabels, normMeth="DESeq", postfix="")
setwd("..")
#sample MSM719M9 is an outlier remove it from dataset
#sample HSM5FZAZ is an outlier remove it from dataset
htxCount <- htxCount[,-match(c("MSM719M9","HSM5FZAZ"),colnames(htxCount))]
sampleLabels <- sampleLabels[-match(c("MSM719M9","HSM5FZAZ"),rownames(sampleLabels)),]
#doublecheck whether the order of the samples in sampleLabels and htxCount data still match
#sum(rownames(sampleLabels) == colnames(htxCount))==dim(sampleLabels)[1]
View(htxCount)
View(sampleLabels)
View(htxCount)
View(normlogQC)
View(dds)
View(dds)
View(datlogQC)
View(normlogQC)
# check if BioCmanager libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"baySeq" %in% installed.packages()) BiocManager::install("baySeq")
if(!"DESeq2" %in% installed.packages()) BiocManager::install("DESeq2")
if(!"edgeR" %in% installed.packages()) BiocManager::install("edgeR")
if(!"bioDist" %in% installed.packages()) BiocManager::install("bioDist")
if(!"biomaRt" %in% installed.packages()) BiocManager::install("biomaRt")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"magrittr" %in% installed.packages()) BiocManager::install("magrittr")
if(!"EnhancedVolcano" %in% installed.packages()) BiocManager::install("EnhancedVolcano")
#Regular R packages:
if(!"ggplot2" %in% installed.packages()){install.packages("ggplot2")}
if(!"limma" %in% installed.packages()){install.packages("limma")}
#if(!"R2HTML" %in% installed.packages()){install.packages("R2HTML")}
#load packages
library(rstudioapi)
library(baySeq)
library(DESeq2)
library(edgeR)
library(bioDist)
library(biomaRt)
library(dplyr)
library(magrittr)
library(EnhancedVolcano)
library(ggplot2)
library(limma)
#library(R2HTML)
# set working environment to the location where current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#include some functions adapted from ArrayAnalysis.org scripts
source("functions_ArrayAnalysis_v2.R")
WORK.DIR <- getwd()
#set wd one directory below to reach the input data
setwd('..')
WORK.DIR <- getwd()
#Obtain data from step 1
htxCount <- read.csv("1-data_preprocessing/output/htxCount.csv")
sampleLabels <- read.csv("1-data_preprocessing/output/sampleLabels.csv", header=FALSE)
# Set Working Directory back to current folder
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
WORK.DIR<- getwd()
#checking which samples have all zero values across all genes
#these sample should be removed otherwise there will be a problem when calculating estimate size factors
idx <- which(colSums(htxCount) == 0)
#CSMDRVXI MSM719ME  are samples which has all zero values for all genes, so we remove them
htxCount <- htxCount[ , -idx]
#removing same samples from sample labels metadata
sampleLabels <- sampleLabels[-idx , ]
#Set column one as rownames
rownames(sampleLabels) <- sampleLabels[,1]
sampleLabels <- sampleLabels[,-1]
#add column names
colnames(sampleLabels) <- c( "sampleID", "biopsy_location","disease")
#check whether sample names are in same order
#all(colnames(htxCount) == rownames(sampleLabels2))
#select only biopsy_location and disease columns
sampleLabels<-sampleLabels[, c(2,3)]
sampleLabels$disease <- relevel(factor(sampleLabels$disease),ref="nonIBD")
#add an experimental group variable to sampleLabels
sampleLabels$group <- as.factor(paste(sampleLabels$disease,sampleLabels$biopsy_location,sep="_"))
#remove genes which have all zero values across all samples then start DE analysis
nonzero <- rowSums(htxCount) > 0
htxCount %<>% .[nonzero,]
#############################CPM FILTERING#############################################
#aveLogCPM function computes average log2 counts-per-million for each row of counts.
#the below function is similar to log2(rowMeans(cpm(y, ...)))
mean_log_cpm = aveLogCPM(htxCount)
# We plot the distribution of average log2 CPM values to verify that our chosen presence threshold is appropriate. The distribution is expected to be bi modal, with a low-abundance peak representing non-expressed genes and a high-abundance peak representing expressed genes. The chosen threshold should separate the two peaks of the bi modal distribution.
filter_threshold <- -1# we can try different threshold values
#jpeg(file="avgLogCpmDist.jpeg")#if you want to save the histogram uncomment the following command
ggplot() + aes(x=mean_log_cpm) +
geom_histogram(binwidth=0.2) +
geom_vline(xintercept=filter_threshold) +
ggtitle("Histogram of mean expression values")
#dev.off()#to save the plot to the file
#Having chosen our threshold, lets pick the subset of genes whose average expression passes that threshold.
keep_genes <- mean_log_cpm >= filter_threshold
htxCount <- htxCount[keep_genes,]
#dim(htxCount)#to check dimension of the data
###############################################################################
# First create a DESeqDataSet object
#(non-intercept) statistical model based on the disease and biopsy_location, group column represent both of them
dds <- DESeqDataSetFromMatrix(countData = htxCount, colData=sampleLabels, design= ~0 + group)
View(dds)
#estimate the size factors
#To perform the median of ratios method of normalization, DESeq2 has a single estimateSizeFactors() function that will generate size factors for us.
dds <- estimateSizeFactors(dds)
View(dds)
sizeFactors(dds)
View(dds)
View(dds)
#normalize the data (here for Quality Control(QC) plotting)
#QC plotting is optional
norm <- counts(dds,normalize=TRUE)
View(norm)
#create a 2logged data for original object (here for QC plotting)
datlog <- log(htxCount+1,2)
#create a 2logged norm object (here for QC plotting)
normlog <- log(norm+1,2)
#for QC remove genes that have not been measured in any sample in the experiment
datlogQC <- datlog[rowSums(datlog)!=0,]
normlogQC <- normlog[rowSums(normlog)!=0,]
factors <- c("disease","biopsy_location","group")
if(!dir.exists("QCraw")) dir.create("QCraw")
setwd(paste(WORK.DIR,"QCraw",sep="/"))
png("sizefactors.png")
plot(sizeFactors(dds),type='h',lwd=5,ylim=c(0,max(sizeFactors(dds))),col="darkblue")
dev.off()
createQCPlots(datlogQC, factors, Table=sampleLabels, normMeth="", postfix="")
setwd("..")
#create QC plots for normalized data colored by different variables
if(!dir.exists("QCnorm")) dir.create("QCnorm")
setwd(paste(WORK.DIR,"QCnorm",sep="/"))
createQCPlots(normlogQC, factors, Table=sampleLabels, normMeth="DESeq", postfix="")
setwd("..")
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
#Regular R packages:
if(!"ggplot2" %in% installed.packages()){install.packages("ggplot2")}
if(!"VennDiagram" %in% installed.packages()){install.packages("VennDiagram")}
if(!"RColorBrewer" %in% installed.packages()){install.packages("RColorBrewer")}
#load libraries
library(rstudioapi)
library(dplyr)
library(ggplot2)
library(VennDiagram)
library(RColorBrewer)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd('../..')
work_DIR <- getwd()
#Set location to download data for transcriptomics pathway analysis:
filelocation_t <- paste0(work_DIR, "/transcriptomics_analysis/4-pathway_analysis/output/")
#Obtain data from step 4 (transcript PWs)
tPWs_CD_ileum <- read.delim(paste0(filelocation_t, 'enrichResults_ORA_CD_ileum.tsv'), sep = "\t", header = TRUE)
tPWs_CD_rectum <- read.delim(paste0(filelocation_t, 'enrichResults_ORA_CD_rectum.tsv'), sep = "\t",header = TRUE)
tPWs_UC_ileum <- read.delim(paste0(filelocation_t, 'enrichResults_ORA_UC_ileum.tsv'), sep = "\t", header = TRUE)
tPWs_UC_rectum <- read.delim(paste0(filelocation_t, 'enrichResults_ORA_UC_rectum.tsv'), sep = "\t",header = TRUE)
#Set location to download data for metabolomics pathway analysis:
filelocation_m <- paste0(work_DIR, "/metabolomics_analysis/9-metabolite_pathway_analysis/output/")
#Obtain data from step 9 (metabolite PWs)
mPWs_CD <- read.delim(paste0(filelocation_m, 'mbxPWdata_CD.csv'), sep = ",", na.strings=c("", "NA"))
mPWs_UC <- read.delim(paste0(filelocation_m, 'mbxPWdata_UC.csv'), sep = ",", na.strings=c("", "NA"))
#filter out unused columns
#mSet_CD <- mSet_CD [,c(1:4)]
#mSet_UC <- mSet_UC [,c(1:4)]
# Set Working Directory back to current folder
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
work_DIR <- getwd()
View(mPWs_CD)
View(tPWs_CD_rectum)
tPWs_CD_ileum_sign <- tPWs_CD_ileum[(tPWs_CD_ileum$p.adjust<0.05)&(tPWs_CD_ileum$qvalue<0.02),]
tPWs_CD_rectum_sign <- tPWs_CD_rectum[(tPWs_CD_rectum$p.adjust<0.05)&(tPWs_CD_rectum$qvalue<0.02),]
tPWs_UC_ileum_sign <- tPWs_UC_ileum[(tPWs_UC_ileum$p.adjust<0.05)&(tPWs_UC_ileum$qvalue<0.02),]
tPWs_UC_rectum_sign <- tPWs_UC_rectum[(tPWs_UC_rectum$p.adjust<0.05)&(tPWs_UC_rectum$qvalue<0.02),]
mPWs_CD_sign <- mPWs_CD[(mPWs_CD$probabilities<0.05),]
mPWs_UC_sign <- mPWs_UC[(mPWs_UC$probabilities<0.05),]
View(mPWs_CD_sign)
mPWs_CD_interest <- mPWs_CD[(mPWs_CD$HMDBsInPWs>3)&(mPWs_CD$ProteinsInPWs>5),]
mPWs_UC_interest <- mPWs_UC[(mPWs_UC$HMDBsInPWs>3)&(mPWs_UC$ProteinsInPWs>5),]
#Cutoff values for significant && interesting metabolomics PWs:
##p-value smaller than 0.05, 3 or more metabolites in the PW, and 5 or more proteins.
mPWs_CD_sign_interest <- mPWs_CD[(mPWs_CD$probabilities<0.05)&(mPWs_CD$HMDBsInPWs>3)&(mPWs_CD$ProteinsInPWs>5),]
mPWs_UC_sign_interest <- mPWs_UC[(mPWs_UC$probabilities<0.05)&(mPWs_UC$HMDBsInPWs>3)&(mPWs_UC$ProteinsInPWs>5),]
set3 <- paste(mPWs_CD_sign_interest[,1] , sep="")
set4 <- paste(mPWs_UC_sign_interest[,1] , sep="")
##Compare both disorders with one another on metabolomics level:
mset_WP_IDs_overlap_sign_interest <- Reduce(intersect, list(set3, set4))
View(mPWs_UC_sign)
View(mPWs_CD_sign_interest)
View(mPWs_UC_sign_interest)
View(tPWs_CD_ileum_sign)
View(tPWs_CD_rectum_sign)
View(tPWs_UC_ileum_sign)
View(tPWs_UC_rectum_sign)
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"org.Hs.eg.db" %in% installed.packages()) BiocManager::install("org.Hs.eg.db")
if(!"AnnotationDbi" %in% installed.packages()) BiocManager::install("AnnotationDbi")
#if(!"rWikiPathways" %in% installed.packages()) BiocManager::install("rWikiPathways")
#if(!"clusterProfiler" %in% installed.packages()) BiocManager::install("clusterProfiler")
if(!"dplyr" %in% installed.packages()){install.packages("dplyr")}
#loading installed libraries
library(rstudioapi) # interface for interacting with RStudio IDE with R code.
library(org.Hs.eg.db) #This is the organism annotation package ("org") for Homo sapiens ("Hs"), organized as an AnnotationDbi   package ("db"), using Entrez Gene IDs ("eg") as primary key.
library(AnnotationDbi) # for connecting and querying annotation databases
#library(rWikiPathways) # for programmatic access to WikiPathways content
#library(clusterProfiler) # for implementing methods to analyze and visualize functional profiles of genomic data
library(dplyr)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
## Select a disorder to analyse (options; CD or UC)
disorder <- "CD"
##Obtain data from step 2:
setwd('..')
work_DIR <- getwd()
#we have two datasets from different biopsy locations
dataset1 <- read.delim("2-differential_gene_expression_analysis/statsmodel/table_UC_Ileum_vs_nonIBD_Ileum.tab")
dataset2 <- read.delim("2-differential_gene_expression_analysis/statsmodel/table_UC_Rectum_vs_nonIBD_Rectum.tab")
dataset3 <- read.delim("2-differential_gene_expression_analysis/statsmodel/table_CD_Ileum_vs_nonIBD_Ileum.tab")
dataset4 <- read.delim("2-differential_gene_expression_analysis/statsmodel/table_CD_Rectum_vs_nonIBD_Rectum.tab")
# Set Working Directory back to current folder
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
work_DIR <- getwd()
if (disorder == "CD") {
#filter out  unused columns, we select geneSymbol, log2FC and pvalue
dataset_ileum<- subset( dataset3, select = c(1,3,7))
dataset_rectum<- subset( dataset4, select = c(1,3,7))
print("Selected disorder is Crohn's disease")
}else if(disorder == "UC"){
#filter out  unused columns, we select geneSymbol, log2FC and pvalue
dataset_ileum<- subset( dataset1, select = c(1,3,7))
dataset_rectum<- subset( dataset2, select = c(1,3,7))
print("Selected disorder is Ulcerative Colitis")}else{print("Disorder not Recognised")
}
#merge two dataset of two locations into one data
dataset <- merge(dataset_ileum, dataset_rectum,by.x="X", by.y="X",sort = TRUE, all.x = TRUE, all.y = TRUE)
#change column names
colnames(dataset) <- c("GeneSymbol","log2FC_ileum","pvalue_ileum","log2FC_rectum","pvalue_rectum")
#converting gene symbols to entrez ID since these are required for the enrichR function
hs <- org.Hs.eg.db #This object is a simple mapping of Entrez Gene identifier
entrezID <- AnnotationDbi::select(hs, keys = dataset$GeneSymbol,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
#filter out double gene symbols
entrezID <- entrezID %>% distinct (entrezID$SYMBOL, .keep_all = TRUE)
# add entrezIDs for each gene symbol in the dataset
dataset <- cbind(entrezID$ENTREZID,dataset)
#change column name
colnames(dataset)[1] = "ENTREZ.ID"
#filter out genes that has NA value for entrezID
#dataset<- dataset %>% tidyr::drop_na(ENTREZ.ID)
View(dataset)
hs <- org.Hs.eg.db #This object is a simple mapping of Entrez Gene identifier
entrezID <- AnnotationDbi::select(hs, keys = dataset$GeneSymbol,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
View(entrezID)
entrezID$SYMBOL
#filter out double gene symbols
entrezID <- entrezID %>% distinct (entrezID$SYMBOL, .keep_all = TRUE)
shiny::runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
shiny::runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
FC_threshold
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
FC_threshold
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
FC_threshold
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
log2(1.5)
round(log2(1.5))
format(round(log2(1.5), 2), nsmall = 2)
round(log2(1.5)
round(log2(1.5))
round(log2(1.5),2)
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
import re
shiny::runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
shiny::runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
View(mSet_AnalysisReady_Duplicates)
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
View(mSet_AnalysisReady)
View(mSet_AnalysisReady_Duplicates)
View(mSet_AnalysisReady_Duplicates)
mSet_AnalysisReady %>% group_by(HMDB_ID, Compound_Name)
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
View(mSet_AnalysisReady)
x <- mSet_AnalysisReady %>% group_by(HMDB_ID)
View(x)
summary(x)
View(mSet_AnalysisReady_Duplicates)
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
View(mSet_AnalysisReady)
View(mSet_AnalysisReady_Duplicates)
View(mSet_AnalysisReady_Duplicates)
foldchange_disorder
View(mSet_AnalysisReady_FC)
View(mSet_AnalysisReady_p)
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
View(mSet_AnalysisReady_p)
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/myProject/Transcriptomics_Metabolomics_Analysis_Rshiny')
install.packages("languageserver")
shiny::runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
View(showresultsMetadata)
View(resultsMetadata)
View(list_Relevant_HMDB_IDs)
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
endpointwp
queryMetadata
curl_args
curl_args=list(useragent=R.version.string)
View(curl_args)
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
runApp('C:/Users/duygu/OneDrive/Desktop/TEST/Transcriptomics_Metabolomics_Analysis_Rshiny')
item1
query_CombinePWs
queryMetadata
endpointwp
query_CombinePWs
rm(list=ls())
setwd("C:/Users/duygu/OneDrive/Desktop/QIB_visit/MGnify")
rm(list=ls())
setwd("C:/Users/duygu/OneDrive/Desktop/QIB_visit/MGnify_analysis")
workDIR = getwd()
filenames <- list.files(paste0(workDIR,"/DIME_MGnify/dene_data"), pattern="*.tsv", full.names=TRUE)
filenames
ldf <- lapply(filenames, read.csv,sep="\t")
ldf
ldf[1]
filenames <- list.files(paste0(workDIR,"/DIME_MGnify/dene_data"), pattern="*.tsv", full.names=TRUE)
ldf <- lapply(filenames, read.csv,sep="\t")
colnames(ldf[[1]])
colnames(ldf[[2]])
df1 = data.frame(StudentId = c(101:106),
Product = c("Hindi", "English",
"Maths", "Science",
"Political Science",
"Physics"))
df1
df2 = data.frame(StudentId = c(102, 104, 106,
107, 108),
State = c("Mangalore", "Mysore",
"Pune", "Dehradun", "Delhi"))
df2
df = merge(x = df1, y = df2, by = "StudentId")
df
df1 <- data.frame(var1=c('a','b','c'), var2=c(1,2,3))
df2 <- data.frame(var1=c('a','b','c'), var3=c(2,4,6))
df1
df2
cbind(df1,df2)
merge(df1,df2)
filenames <- list.files(paste0(workDIR,"/DIME_MGnify/dene_data"), pattern="*.tsv", full.names=TRUE)
rm(list=ls())
setwd("C:/Users/duygu/OneDrive/Desktop/QIB_visit/MGnify_analysis")
workDIR = getwd()
filenames <- list.files(paste0(workDIR,"/DIME_MGnify/dene_data"), pattern="*.tsv", full.names=TRUE)
ldf <- lapply(filenames, read.csv,sep="\t")
filenames <- list.files(paste0(workDIR,"/DIME_MGnify/dene_data"), pattern="*.tsv", full.names=TRUE)
ldf <- lapply(filenames, read.csv,sep="\t")
ldf
rbind(ldf[[1]],ldf[[2]])
merge(ldf[[1]],ldf[[2]])
merge(ldf[[1]],ldf[[2]],all.x = TRUE)
#merge two data frames by keeping all rows assignng NA to non-overlapped ones
mergedData <- merge (ldf[[1]], ldf[[2]],all.x = TRUE)
mergedData [is.na(mergedData)] <- 0
View(mergedData)
shiny::runApp('C:/Users/duygu/surfdrive/FNS_CLOUD/GITHUB_codes/Transcriptomics_Metabolomics_Analysis_Rshiny')
library(rstudioapi)
library(dplyr)
#setwd(dirname(getActiveDocumentContext()$path)) not working corectly so the below is alternative
setwd("C:/Users/duygu/OneDrive/Desktop/Metagenome-Metabolome analysis/analysis/preprocessing")
#read metadata
metaData <- read.csv("data/hmp2_metadata.csv")
#filter out samples by data type column
metaData <- metaData[metaData$data_type== "metagenomics",]
#before having applied more filtering options we need to bacup data
#metaData.backup <- metaData
#samples have different visit numbers so we need to take one of them as a baseline
metaData <- metaData[metaData$visit_num== 4,]
#filter out columns
#metaData <- metaData [,c(2,3,5)]
metaData <- metaData [,c("External.ID","Participant.ID","diagnosis")]
#to remove _p from sample names
#metaData$External.ID <- sapply(strsplit(metaData$External.ID,"_"), `[`, 1)
#read metagenomics data
mgxData <- read.csv("data/ecs_3.tsv", sep = "\t")
mgxData.backup <- mgxData
#filter out rows which is not assigned and named ungrouped
mgxData <- mgxData %>% dplyr:: filter(!grepl('UNGROUPED|UNMAPPED', Feature.Sample))
#take only first row for each group of row to perform community-level pathway analysis
View(metaData)
mgxData <- mgxData %>% dplyr:: filter(!grepl("\\|", Feature.Sample)) # take rows not containing "|" character
#remove the first row containing column names since it is already in col names
mgxData <- mgxData [-1,]
#remove "_level4ec" from colnames of mgxData
colnames(mgxData) <- sub("_level4ec.*", "", colnames(mgxData))
View(mgxData)
features <- mgxData[,1]
#select samples that only exist in metadata
mgxData <- mgxData[names(mgxData) %in% metaData$External.ID]
View(metaData)
#see difference between two sample vectors
notExistSample <- setdiff( metaData$External.ID,colnames(mgxData))
#delete not exist sample from metadata
metaData <- metaData [!(metaData$External.ID==notExistSample),]
# Check whether sample names are in same order
all(colnames(mgxData) == metaData$External.ID) # FALSE
colnames(mgxData)
metaData$External.ID
order(metaData)
order(metaData$External.ID)
df2 <- metaData[order(metaData$External.ID),]
View(df2)
metaData <- metaData[order(metaData$External.ID),]
df <- mgxData[colnames(mgxData),]
View(df)
View(df)
all(colnames(mgxData) == metaData$External.ID) # FALSE
df2 <- mgxData[,order(colnames (mgxData)]
df2 <- mgxData[,order(colnames (mgxData))]
View(df2)
# Check whether sample names are in same order
all(colnames(mgxData) == metaData$External.ID) # FALSE
mgxData <- mgxData[,order(colnames (mgxData))]
# Check whether sample names are in same order
all(colnames(mgxData) == metaData$External.ID) # FALSE
#bind feature column to the beginning of data frame
mgxData <- cbind(features, mgxData)
#change column name
colnames(mgxData)[1] <- "Gene.Family"
rm(df,df2)
#remove gene families which have all zero values across all samples then start DE analysis
nonzero <- rowSums(mgxData) > 0
View(mgxData)
ncol(mgxData)
#remove gene families which have all zero values across all samples then start DE analysis
nonzero <- rowSums(mgxData[,c(1:ncol(mgxData))]) > 0
#remove gene families which have all zero values across all samples then start DE analysis
nonzero <- rowSums(mgxData[,c(2:ncol(mgxData))]) > 0
mgxData[,c(2:ncol(mgxData))]
rowSums(mgxData[,c(2:ncol(mgxData))])
rowSums(mgxData[c(2:nrow(mgxData)),c(2:ncol(mgxData))])
df <- mgxData[,c(2:ncol(mgxData))]
rowSums(df)
View(df)
df <- mgxData[c(2:nrow(mgxData)),c(2:ncol(mgxData))]
View(mgxData)
rowSums
rowSums(df)
df <- df [c(1:10),]
rowSums(df)
df <- df [c(1:2),]
rowSums(df)
rowSums(df[c(2:3),])
df[c(2:3),]
getwd()
setwd("C:/Users/duygu/OneDrive/Desktop/Metagenome-Metabolome analysis/analysis/preprocessing")
write.table(metaData, "output/metaData", sep = "\t")
write.table(mgxData, "output/mgxData", sep = "\t")
write.table(metaData, "output/metaData", sep = "\t",row.names = FALSE,quote=FALSE)
write.table(mgxData, "output/mgxData", sep = "\t",row.names = FALSE,quote=FALSE )
View(metaData)
# Remove genes which has all zero values for all samples then start DE analysis
mgxData[is.na(mgxData)] <- 0
nonzero <- rowSums(mgxData) > 0
